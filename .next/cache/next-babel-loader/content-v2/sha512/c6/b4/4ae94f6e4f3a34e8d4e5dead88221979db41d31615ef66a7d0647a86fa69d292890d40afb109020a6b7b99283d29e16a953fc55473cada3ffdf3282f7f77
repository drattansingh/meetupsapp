{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Program Files\\\\ReactProjects\\\\completetutorial22\\\\pages\\\\index.js\";\nimport Head from 'next/head';\nimport MeetupList from '../components/meetups/MeetupList';\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Browse a huge list of highly active React meetups!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n/** getStaticProps is a reserved name used for data fetching. next.js will look for this asynchronous\r\n *  function name and execute it during the pre-rendering process. In other words it'll call this \r\n * function before the other components in this page. The code contained is executed during the build process \r\n * and will never execute on the client or server side.\r\n * \r\n * The function always need to return an object\r\n * \r\n * It only works in PAGE component files\r\n * i.e. next.js files and not the normal component files which uses react. \r\n * \r\n * The props property defined in the function below is accessible in the Homepage props above\r\n * i.e. we could now get the data from props.meetups\r\n * \r\n * Thus data fetching is moved from the client side to the during the build process\r\n * \r\n * This function is used a lot when working with next.js\r\n */\n\n\n_c = HomePage;\n\n/** This is also a reserved function but unlike the above will not execute during the build process\r\n * but on the server after deployment. All the code in this function will execute on the server and never\r\n * on the client. It has access to request and response similar to node.js.\r\n * \r\n * The code is guaranteed to run for every request because it's executed on the server after deployment.\r\n * Disadvantage is user will have to wait for page to be generated after every request.\r\n * \r\n * If the data isn't changing regularly then the getStatisProps is better. But if the data is changing\r\n * regularly anc constantly, the getServerSideProps will be better\r\n */\n// export async function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n//   // fetch data from an API\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS\n//     }\n//   };\n// }\nexport var __N_SSG = true;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Program Files/ReactProjects/completetutorial22/pages/index.js"],"names":["Head","MeetupList","HomePage","props","meetups"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAIA,OAAOC,UAAP,MAAuB,kCAAvB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,aADP;AAEE,QAAA,OAAO,EAAC;AAFV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AAYD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KA/BSF,Q;;AA6DT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA,eAAeA,QAAf","sourcesContent":["import Head from 'next/head';\r\n\r\nimport { MongoClient } from 'mongodb';\r\n\r\nimport MeetupList from '../components/meetups/MeetupList';\r\n\r\nfunction HomePage(props) {\r\n  return(\r\n    <>\r\n      <Head>\r\n        <title>React Meetups</title>\r\n        <meta\r\n          name='description'\r\n          content='Browse a huge list of highly active React meetups!'\r\n        />\r\n      </Head>\r\n      <MeetupList meetups={props.meetups} />\r\n    </>\r\n  );\r\n}\r\n\r\n/** getStaticProps is a reserved name used for data fetching. next.js will look for this asynchronous\r\n *  function name and execute it during the pre-rendering process. In other words it'll call this \r\n * function before the other components in this page. The code contained is executed during the build process \r\n * and will never execute on the client or server side.\r\n * \r\n * The function always need to return an object\r\n * \r\n * It only works in PAGE component files\r\n * i.e. next.js files and not the normal component files which uses react. \r\n * \r\n * The props property defined in the function below is accessible in the Homepage props above\r\n * i.e. we could now get the data from props.meetups\r\n * \r\n * Thus data fetching is moved from the client side to the during the build process\r\n * \r\n * This function is used a lot when working with next.js\r\n */\r\nexport async function getStaticProps() {\r\n  // fetch data from an API\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://root:root@cluster0.f2dq0.mongodb.net/meetups?retryWrites=true&w=majority'\r\n  );\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection('meetups');\r\n  const meetups = await meetupsCollection.find().toArray();\r\n\r\n  client.close();\r\n  return {\r\n    props: {\r\n      meetups: meetups.map((meetup) => ({\r\n        title: meetup.title,\r\n        address: meetup.address,\r\n        image: meetup.image,\r\n        id: meetup._id.toString(),\r\n      })),\r\n    },\r\n    /** Because this function is executed during the build process, i.e. npm run build, the data could change\r\n     * and may not be up to date. After deploying, if we add more data , this initial data will be out of date.\r\n     * the revalidate property unlocks incremental static generation. 1 is the amount of seconds it'll take\r\n     * to revalidate.... a value of 10 means it'll revalidate after every 10 seconds\r\n     */\r\n    revalidate: 1 \r\n  }; \r\n}\r\n\r\n\r\n/** This is also a reserved function but unlike the above will not execute during the build process\r\n * but on the server after deployment. All the code in this function will execute on the server and never\r\n * on the client. It has access to request and response similar to node.js.\r\n * \r\n * The code is guaranteed to run for every request because it's executed on the server after deployment.\r\n * Disadvantage is user will have to wait for page to be generated after every request.\r\n * \r\n * If the data isn't changing regularly then the getStatisProps is better. But if the data is changing\r\n * regularly anc constantly, the getServerSideProps will be better\r\n */\r\n\r\n// export async function getServerSideProps(context) {\r\n//   const req = context.req;\r\n//   const res = context.res;\r\n\r\n//   // fetch data from an API\r\n\r\n//   return {\r\n//     props: {\r\n//       meetups: DUMMY_MEETUPS\r\n//     }\r\n//   };\r\n// }\r\n\r\n\r\n\r\nexport default HomePage;"]},"metadata":{},"sourceType":"module"}